/* Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
   file Copyright.txt or https://cmake.org/licensing for details.  */
#ifndef cmFastbuildFileWriter_h
#define cmFastbuildFileWriter_h

#include <string>
#include <vector>

#include "cmGeneratedFileStream.h"
#include "cmCustomCommand.h"

/** \class cmFastbuildFileWriter
 * \brief Handler for writing Fastbuild .bff files.
 */
class cmFastbuildFileWriter
{
public:
  //! See http://www.fastbuild.org/docs/functions/compiler.html
  struct Compiler
  {
    std::string Name;
    std::string Executable; //!< Primary compiler executable
    std::vector<std::string>
      ExtraFiles; //!< (optional) Additional files (usually dlls) required by
                  //!< the compiler.
  };

  //! See http://www.fastbuild.org/docs/functions/objectlist.html
  struct ObjectList
  {
    std::string Alias;
    std::string Compiler;           //!< Compiler to use
    std::string CompilerOptions;    //!< Options for compiler
    std::string CompilerOutputPath; //!< Path to store intermediate objects

    //! Explicit array of files to build
    std::vector<std::string> CompilerInputFiles;

    //! (optional) Force targets to be built before this
    std::vector<std::string> PreBuildDependencies;
  };

  //! See http://www.fastbuild.org/docs/functions/objectlist.html
  struct Alias
  {
    std::string Name;
    std::vector<std::string> Targets;
  };

  //! See http://www.fastbuild.org/docs/functions/exec.html
  struct Exec
  {
    std::string Name;

    //! Executable to run
    std::string ExecExecutable;

    //! Output file generated by executable
    std::string ExecOutput;

    //! (optional) Working dir to set for executable
    std::string ExecWorkingDir;

    //! (optional) Arguments to pass to executable
    std::vector<std::string> ExecArguments;

	//! (optional) Write the standard output from the executable to the output file
	bool ExecUseStdOutAsOutput = false;

	//! (optional) Run the executable even if inputs have not changed
	bool ExecAlways = false;

    //! (optional) Force targets to be built before this
    std::vector<std::string> PreBuildDependencies;
  };

  //! See http://www.fastbuild.org/docs/functions/executable.html and http://www.fastbuild.org/docs/functions/dll.html
  struct Library
  {
    std::string Name;

    std::string Type;

    //! Linker executable to use
    std::string Linker;

    //! Output from linker
    std::string LinkerOutput;

    //! Options to pass to linker
    std::string LinkerOptions;

    //! Libraries to link into the binary. Can be other targets.
    std::vector<std::string> Libraries;

    //! (optional) Force targets to be built before this
    std::vector<std::string> PreBuildDependencies;

	//! Dummy compiler
	std::string DummyCompiler;
  };

  struct Target
  {
    explicit Target(const std::string& name)
      : Name(name)
    {
    }

    const Library& GetLibrary() const { return Library; }

    const std::vector<ObjectList> GetObjectLists() const
    {
      return ObjectLists;
    }

    const std::vector<Exec> GetPreBuildEvents() const
    {
      return PreBuildEvents;
    }

    const std::vector<Exec> GetPreLinkEvents() const { return PreLinkEvents; }

    const std::vector<Exec> GetPostBuildEvents() const
    {
      return PostBuildEvents;
    }

    Library& MakeLibrary();
    ObjectList& MakeObjectList();
    Exec& MakePreBuildEvent();
    Exec& MakePreLinkEvent();
    Exec& MakePostBuildEvent();

	Alias MakeAlias() const;

    void ComputeDummyOutputPaths(const std::string& root);
    void ComputeInternalDependencies();
    std::string GetLastExecutedAlias() const;

    std::string Name;
    bool HasLibrary = false;

  private:
    std::vector<ObjectList> ObjectLists;
    Library Library;
    std::vector<Exec> PreBuildEvents;
    std::vector<Exec> PreLinkEvents;
    std::vector<Exec> PostBuildEvents;
  };

  static void GenerateBuildScript(const std::string& filePrefix,
                                  cmFastbuildFileWriter::Exec& exec,
                                  const cmCustomCommand& command);

public:
  /** Opens a file for writing at the given path. */
  cmFastbuildFileWriter(const std::string& filename);

  /** Closes the file */
  ~cmFastbuildFileWriter();

  void WriteSingleLineComment(const std::string& comment);
  void Write(const Compiler& compiler);
  void Write(const ObjectList& compiler);
  void Write(const Alias& compiler);
  void Write(const Library& library);
  void Write(const Exec& exec);
  void WriteVariable(const std::string& name,
                     const std::string& string_literal_argument,
                     bool convertPaths = false)
  {
    WriteVariable(name, string_literal_argument.c_str(), convertPaths);
  }
  void WriteVariable(const std::string& name,
                     const char *string_literal_argument,
                     bool convertPaths = false);
  void WriteVariable(const std::string& name, bool boolean_literal);
  void PushFunctionCall(const std::string& function,
                        const std::string& string_literal_argument = "");
  void PopFunctionCall();
  void PushScope(const std::string& delimiter);
  void PopScope(const std::string& delimiter);

private:
  void WriteArray(const std::vector<std::string>& values,
                  bool convertPaths = false, bool quote = true);

private:
  cmGeneratedFileStream file;

  std::string currentIndent;
};

#endif
